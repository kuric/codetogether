<div class="container">
    <div class="row editor">
        <div class="col-md-8 selection">
            <textarea id="code-screen">{{content}}
            
            
            </textarea>
            <div class="modeSelector">
            <select id="mode">
                <option>js</option>
                <option>css</option>
                <option>php</option>
                <option>c</option>
                <option>c++</option>
                <option>java</option>
                <option>xml</option>
                <option>html</option>
            </select>
            </div>
        </div>
        <div class="col-md-4" id="chatbox">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    Chat room
                    <span class="pull-right" id="chatbox-username">
                        {{#if user}} {{user.name}} {{/if}}
                    </span>
                </div>
                <div class="panel-body fixed-panel">
                    <ul class="media-list" id="chatbox-listMessages">

                    </ul>
                </div>
                <div class="panel-footer">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Enter message" id="userMessage" />
                        <span class="input-group-btn">
                            <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<input type="hidden" value="{{roomId}}" id="roomId" />
<input type="hidden" value="{{creator}}" id="creator" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.38.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/addon/mode/loadmode.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/meta.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/css/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.38.0/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/xml/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/clike/clike.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/htmlmixed/htmlmixed.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.39.0/mode/php/php.min.js"></script>
<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    var access = false;
    var uAc;
    var EditorClient = ot.EditorClient;
    var SocketIOAdapter = ot.SocketIOAdapter;
    var CodeMirrorAdapter = ot.CodeMirrorAdapter;
    var language = "javascript";
    {{!-- var socket = io.connect("http://kuric:3000"); --}}

    var socket = io.connect("https://codetogether.herokuapp.com/");
    var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
        lineNumbers: true,
        theme: "monokai",
        mode: language
    });
    var userName = $("#chatbox-username").val();
    if (userName === "") {
        userName = $("#userName").text();
        if (userName === "") {
            var userId = Math.floor(Math.random() * 9999).toString();
            userName = "User" + userId;
            $("#chatbox-username").text(userName);
        }
    };

    var creator = $("#creator").val();
    var uid = $("#uid").val();

    if (uid === creator) {
        $("body").append("<input type='hidden' class='access' value='" + creator + "'/>");
    }

    var code = $("#code-screen").val();
    var cmClient;
    $("#mode").change(function(){
        change(this.value);
    });

    function change(value) {
        var mode, spec;
        var info = CodeMirror.findModeByExtension(value);
        if (info) {
                mode = info.mode;
                spec = info.mime;
            }
        if (mode) {
            editor.setOption("mode", spec);
            CodeMirror.autoLoadMode(editor, mode);
            document.getElementById("code-screen").textContent = spec;
        } else {
            alert("Could not find a mode corresponding to " + value);
        }
        return null;
    }

    function setMode() {
        if ($(".access").length) {
            var accessed = checkAccess();
            var uid = $("#uid").val();
            if (accessed.indexOf(uid) >= 0) {
                access = true;
            } else {
                access = false;
            }
        } else {
            access = false;
        }
        if (access === false) {
            $(".accessed").remove();
            editor.setOption("readOnly", true);
        } else {
            editor.setOption("readOnly", false);
        }
    }

    function init(str, revision, clients, serverAdapter) {
        if (code) {
            editor.on("beforeChange", function () {
                if ($(".access").length) {
                    var accessed = checkAccess();
                    var uid = $("#uid").val();
                    if (accessed.indexOf(uid) >= 0) {
                        access = true;
                    } else {
                        access = false;
                    }
                } else {
                    access = false;
                }
                if (access === false) {
                    $(".accessed").remove();
                    editor.setOption("readOnly", true);
                } else {
                    editor.setOption("readOnly", false);
                }
            });
            editor.setValue(code);
            setMode();
        } else {
            editor.setValue(str);
            setMode();
        }

        cmClient = window.cmClient = new EditorClient(
            revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
        );
    };

    socket.on('doc', function (obj) {
        init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
    });

    var roomId = $("#roomId").val();
    socket.emit("joinRoom", { room: roomId, username: userName });

    var userMessage = function (name, text, uid) {
        return ('<li class="media"><div class="media-body"><div class="media">' +
            '<div class="media-body"/>' +
            '<b class="userName">' + name + '</b> : ' + text +
            '<input type="hidden" value="' + uid + '"/>' +
            '</hr> </div></div></div></li>'
        );
    };

    var giveAccess = function (accessId, accessName) {
        socket.emit('giveAccess', { uid: accessId, uName: accessName });
    }
    var deleteAccess = function (accessId, accessName) {
        socket.emit('deleteAccess', { uid: accessId, uName: accessName });
    }
    var sendMessage = function () {
        var userMessage = $('#userMessage').val();
        var uid = $('#uid').val();
        socket.emit('chatMessage', { message: userMessage, username: userName, uid: uid });
        $('#userMessage').val("");
    }
    var checkAccess = function () {
        var accessIds = [];

        if ($(".access").length) {
            $(".access").each(function () {
                accessIds.push($(this).val());
            });
        }
        return accessIds;
    }

    socket.on('chatMessage', function (data) {
        $("#chatbox-listMessages").append(userMessage(data.username, data.message, data.uid));
        var accessed = checkAccess();
        if (uid === creator || uid === data.uid) {
            $("b.userName").filter(function () {
                if ($(this).text().trim() === data.username.trim()
                    && $(this).text().trim().indexOf("ðŸ“‹") < 0
                    && (accessed.indexOf(data.uid) >= 0)) {
                    var text = $(this).text().trim() + 'ðŸ“‹';
                    $(this).text(text);
                }
            });
        }
        $(".panel-body.fixed-panel").scrollTop(9999);
    });

    socket.on('giveAccess', function (data) {
        var accessed = checkAccess();
        if (accessed === [] || accessed.indexOf(data.uid) < 0) {
            $("body").append("<input type='hidden' class='access' value='" + data.uid + "'/>");
            var uid = $("#uid").val();
            if (uid === data.uid) {
                if (!$(".accessed").length)
                    $(".panel-heading").append("<span class='accessed'>- access is allowed!</span>");
            }
            if (uid === creator || uid === data.uid) {
                $("b.userName").filter(function () {
                    if ($(this).text().trim() === data.uName && $(this).text().trim().indexOf("ðŸ“‹") < 0) {
                        var text = $(this).text().trim() + 'ðŸ“‹';
                        $(this).text(text);
                    }
                });
            }
        }
    });
    socket.on('deleteAccess', function (data) {
        var accessed = checkAccess();
        if (accessed.indexOf(data.uid) >= 0) {
            if ($(".accessed").length) {
                $(".accessed").remove();
            }
            $("input.access[value='" + data.uid + "']").remove();
            if (uid === creator || uid === data.uid) {
                $("b.userName").filter(function () {
                    if ($(this).text().trim() === data.uName && $(this).text().trim().indexOf("ðŸ“‹") >= 0) {
                        var text = $(this).text().trim().replace('ðŸ“‹', "");
                        $(this).text(text);
                    }
                });
            }
        }

    });

    $("body").on('click', 'b.userName', function (event) {
        if (uid === creator) {
            var accessId = $(this).siblings("input").val();
            var accessName = $(this).text().trim();
            var accessed = checkAccess();
            if (accessed.indexOf(accessId) >= 0) {
                deleteAccess(accessId, accessName);
            } else {
                giveAccess(accessId, accessName);
            }
        }
    });
</script>